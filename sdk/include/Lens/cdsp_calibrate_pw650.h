/**************************************************************************
 *                                                                        *
 *         Copyright (c) 2010 by Generalplus Inc.                         *
 *                                                                        *
 *  This software is copyrighted by and is the property of Generalplus    *
 *  Inc. All rights are reserved by Generalplus Inc.                      *
 *  This software may only be used in accordance with the                 *
 *  corresponding license agreement. Any unauthorized use, duplication,   *
 *  distribution, or disclosure of this software is expressly forbidden.  *
 *                                                                        *
 *  This Copyright notice MUST not be removed or modified without prior   *
 *  written consent of Generalplus Technology Co., Ltd.                   *
 *                                                                        *
 *  Generalplus Inc. reserves the right to modify this software           *
 *  without notice.                                                       *
 *                                                                        *
 *  Generalplus Inc.                                                      *
 *  No.19, Industry E. Rd. IV, Hsinchu Science Park,                      *
 *  Hsinchu City 30078, Taiwan, R.O.C.                                    *
 *                                                                        *
 **************************************************************************/
/**
 * @file cdsp_calibrate.h
 * @brief cdsp_calibrate header file
 * @author 
 */

#ifndef _CDSP_CALIBRATE_PW650_H_
#define _CDSP_CALIBRATE_PW650_H_

#include "mach/sensor_mgr.h"

static const unsigned short g_ar0330_lenscmp_table[] = 
{
	0x100, 0x100, 0x101, 0x101, 0x101, 0x101, 0x102, 0x103, 
	0x103, 0x103, 0x104, 0x104, 0x104, 0x105, 0x105, 0x106, 
	0x106, 0x107, 0x106, 0x106, 0x107, 0x107, 0x108, 0x108, 
	0x109, 0x109, 0x10a, 0x10a, 0x10a, 0x10b, 0x10b, 0x10c, 
	0x10c, 0x10d, 0x10e, 0x10f, 0x110, 0x110, 0x110, 0x110, 
	0x111, 0x111, 0x112, 0x112, 0x113, 0x114, 0x114, 0x115, 
	0x115, 0x116, 0x116, 0x117, 0x118, 0x119, 0x11a, 0x11b, 
	0x11b, 0x11c, 0x11d, 0x11e, 0x11f, 0x121, 0x121, 0x122, 
	0x123, 0x124, 0x126, 0x127, 0x128, 0x129, 0x12a, 0x12c, 
	0x12d, 0x12e, 0x12f, 0x131, 0x132, 0x132, 0x134, 0x135, 
	0x137, 0x138, 0x139, 0x13b, 0x13c, 0x13d, 0x13f, 0x140, 
	0x141, 0x143, 0x144, 0x145, 0x147, 0x149, 0x149, 0x14b, 
	0x14d, 0x14d, 0x14f, 0x150, 0x152, 0x154, 0x155, 0x157, 
	0x157, 0x159, 0x15b, 0x15c, 0x15e, 0x15f, 0x161, 0x162, 
	0x163, 0x164, 0x166, 0x167, 0x168, 0x169, 0x16b, 0x16c, 
	0x16e, 0x16f, 0x171, 0x172, 0x173, 0x175, 0x175, 0x178, 
	0x179, 0x17a, 0x17c, 0x17d, 0x17f, 0x180, 0x182, 0x183, 
	0x185, 0x187, 0x188, 0x18a, 0x18d, 0x18e, 0x190, 0x192, 
	0x194, 0x197, 0x19a, 0x19e, 0x19f, 0x1a2, 0x1a1, 0x177, 
	0x151, 0x12e, 0x10e, 0x0f1, 0x0d7, 0x0bf, 0x0aa, 0x097, 
	0x085, 0x075, 0x067, 0x05a, 0x04f, 0x045, 0x03c, 0x034, 
	0x02d, 0x027, 0x021, 0x01c, 0x018, 0x014, 0x011, 0x00e, 
	0x00c, 0x00a, 0x008, 0x006, 0x005, 0x004, 0x003, 0x002, 
	0x001, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 

};

static const unsigned short g_ar0330_r_b_gain[71][2] = 
{ // { r gain, b gain }                  
{34, 201},                    
{37, 198},                    
{40, 196},                    
{44, 193},                    
{47, 191},                    
{50, 188},                    
{52, 186},                    
{55, 184},                    
{58, 181},                    
{61, 179},                    
{63, 176},                    
{65, 174},                    
{68, 171},                    
{70, 169},                    
{72, 166},                    
{74, 164},                    
{76, 161},                    
{78, 159},                    
{80, 156},                    
{81, 154},                    
{83, 151},                    
{84, 149},                    
{86, 146},                    
{87, 144},                    
{88, 141},                    
{89, 139},                    
{90, 137},                    
{90, 134},                    
{91, 132},                    
{91, 129},                    
{91, 127},
{92, 124},
{92, 122},
{93, 119},
{93, 117},
{93, 114},
{94, 112},
{94, 109},
{94, 107},
{94, 104},
{94, 102},
{94, 99},
{93, 97},
{93, 94},
{93, 92},
{92, 89},
{92, 87},
{91, 84},
{90, 82},
{90, 79},
{89, 77},
{88, 74},
{87, 72},
{86, 69},
{85, 67},
{83, 64},
{82, 62},
{81, 59},
{79, 57},
{78, 54},
{76, 52},
{74, 49},
{72, 47},
{71, 44},
{69, 42},
{67, 39},
{65, 36},
{62, 34},
{60, 31},
{58, 29},
{55, 26}
};

static const unsigned short g_ar0330_lens_pw650_r_b_gain[71][2] = 
{ // { r gain, b gain }  
{40, 245},
{43, 239},
{46, 233},
{48, 227},
{51, 222},
{53, 216},
{55, 211},
{58, 205},
{60, 200},
{62, 195},
{64, 190},
{66, 185},
{67, 181},
{69, 176},
{71, 172},
{72, 168},
{74, 163},
{75, 159},
{76, 155},
{78, 152},
{79, 148},
{80, 144},
{81, 141},
{82, 138},
{83, 135},
{84, 132},
{85, 129},
{86, 126},
{87, 123},
{87, 121},
{88, 118},
{89, 116},
{89, 114},
{90, 112},
{90, 110},
{91, 108},
{91, 106},
{92, 105},
{92, 103},
{92, 102},
{93, 101},
{93, 100},
{93, 99},
{93, 98},
{94, 98},
{94, 97},
{94, 97},
{94, 96},
{94, 96},
{95, 96},
{95, 96},
{95, 97},
{95, 97},
{95, 97},
{95, 98},
{96, 99},
{96, 100},
{96, 101},
{96, 102},
{96, 103},
{96, 104},
{97, 106},
{97, 107},
{97, 109},
{97, 111},
{98, 113},
{98, 115},
{98, 117},
{99, 120},
{99, 122},
{99, 125}
};

static const unsigned int g_ar0330_gamma_table_test4[] = 
{
	0x266a00, 0x15550d, 0x044415, 0x044419, 0x14441d, 0x111121, 0x111125, 0x041129, 
0x04442d, 0x044431, 0x111035, 0x041138, 0x10443c, 0x01113f, 0x104443, 0x041146, 
0x01104a, 0x11044d, 0x104450, 0x044153, 0x044156, 0x044159, 0x10415c, 0x10415f, 
0x010462, 0x010465, 0x041068, 0x10416a, 0x04046d, 0x10416f, 0x010472, 0x104174, 
0x041077, 0x010479, 0x00407c, 0x10107e, 0x040480, 0x010482, 0x010184, 0x010186, 
0x010188, 0x01018a, 0x01018c, 0x04018e, 0x040490, 0x101092, 0x004094, 0x010096, 
0x040197, 0x001099, 0x01009b, 0x04049c, 0x00409e, 0x04019f, 0x0010a1, 0x0400a3, 
0x0010a4, 0x0401a5, 0x0040a7, 0x1004a8, 0x0100aa, 0x0010ab, 0x1001ac, 0x0400ae, 
0x0040af, 0x0004b0, 0x1000b2, 0x0100b3, 0x0040b4, 0x0004b5, 0x0001b6, 0x1000b8, 
0x0400b9, 0x0100ba, 0x0010bb, 0x0004bc, 0x0004bd, 0x0001be, 0x1000c0, 0x0400c1, 
0x0100c2, 0x0100c3, 0x0040c4, 0x0010c5, 0x0004c6, 0x0004c7, 0x0001c8, 0x1000ca, 
0x0400cb, 0x0400cc, 0x0100cd, 0x0040ce, 0x0010cf, 0x0004d0, 0x0001d1, 0x0400d3, 
0x0100d4, 0x0040d5, 0x0010d6, 0x0001d7, 0x0040d9, 0x0040da, 0x0040db, 0x0100dc, 
0x0100dd, 0x0400de, 0x1000df, 0x0000e0, 0x0000e1, 0x0001e1, 0x0001e2, 0x0004e3, 
0x0004e4, 0x0001e5, 0x0001e6, 0x0400e8, 0x0100e9, 0x0010ea, 0x0400ec, 0x0010ed, 
0x0100ef, 0x1004f0, 0x1010f2, 0x1010f4, 0x1010f6, 0x0404f8, 0x0101fa, 0x0410fd, 

};


static const unsigned int g_ar0330_gamma_045_table_test1[] = 
{
	0x23230b, 0x333315, 0x333321, 0x33332d, 0x223239, 0x221242, 0x212149, 0x04814f, 
0x048455, 0x21105b, 0x04815f, 0x110864, 0x048168, 0x12106d, 0x104471, 0x044274, 
0x041178, 0x01107c, 0x110480, 0x110483, 0x010486, 0x010489, 0x01108c, 0x00108f, 
0x104190, 0x104093, 0x010095, 0x100097, 0x000498, 0x04009a, 0x00049b, 0x10009d, 
0x04009e, 0x00409f, 0x0010a0, 0x0004a1, 0x0004a2, 0x0001a3, 0x0040a4, 0x0040a5, 
0x0040a6, 0x0000a7, 0x0000a8, 0x0000a9, 0x0040a9, 0x0000aa, 0x0001aa, 0x0004ab, 
0x0000ac, 0x0000ad, 0x0100ad, 0x1000ae, 0x0000af, 0x0400af, 0x0000b0, 0x0100b0, 
0x1000b1, 0x0000b2, 0x1000b2, 0x0000b3, 0x0004b3, 0x0000b4, 0x0010b4, 0x1000b5, 
0x0000b6, 0x0000b6, 0x0001b6, 0x0100b7, 0x0000b8, 0x0001b8, 0x0100b9, 0x0000ba, 
0x0000ba, 0x0001ba, 0x0400bb, 0x0000bc, 0x0010bc, 0x0001bd, 0x1000be, 0x0000bf, 
0x0040bf, 0x0000c0, 0x0004c0, 0x1000c1, 0x0400c2, 0x0000c3, 0x0040c3, 0x0010c4, 
0x0000c5, 0x1000c6, 0x0000c7, 0x0100c7, 0x0010c8, 0x0000c9, 0x0001c9, 0x0400cb, 
0x0000cc, 0x0010cc, 0x0004cd, 0x1000cf, 0x0100d0, 0x0000d1, 0x0004d1, 0x0400d3, 
0x0040d4, 0x0004d5, 0x0400d7, 0x0040d8, 0x1004d9, 0x0100db, 0x0010dc, 0x0400de, 
0x0010df, 0x0801e0, 0x0010e3, 0x0401e4, 0x0010e6, 0x0100e9, 0x1004ea, 0x0080ec, 
0x0401ee, 0x1008f0, 0x0080f3, 0x0200f6, 0x0801f8, 0x2004fb, 0x0000fe, 0x0000fe, 

};



static const unsigned int g_ar0330_gamma_045_table[] = 
{
	0x11140c, 0x045110, 0x044415, 0x111119, 0x11111d, 0x111121, 0x111125, 0x111129, 
0x11112d, 0x044431, 0x044435, 0x111138, 0x04443c, 0x111040, 0x044443, 0x011146, 
0x11044a, 0x10444d, 0x044150, 0x041153, 0x041156, 0x04105a, 0x04115c, 0x04415f, 
0x104162, 0x010465, 0x041068, 0x10416a, 0x01046d, 0x101070, 0x010472, 0x104075, 
0x040477, 0x010179, 0x10407c, 0x04107e, 0x040480, 0x010182, 0x010184, 0x010186, 
0x004089, 0x01018a, 0x01018c, 0x01018e, 0x040490, 0x100492, 0x001094, 0x004096, 
0x040197, 0x101099, 0x00409b, 0x04019c, 0x00109e, 0x0400a0, 0x0010a1, 0x0400a3, 
0x0010a4, 0x0401a5, 0x0040a7, 0x1004a8, 0x0100aa, 0x0010ab, 0x1001ac, 0x0100ae, 
0x0040af, 0x0004b0, 0x1000b2, 0x0100b3, 0x0040b4, 0x0004b5, 0x0001b6, 0x1000b8, 
0x0400b9, 0x0100ba, 0x0040bb, 0x0010bc, 0x0004bd, 0x0001be, 0x1000c0, 0x0400c1, 
0x0400c2, 0x0100c3, 0x0040c4, 0x0010c5, 0x0010c6, 0x0004c7, 0x0001c8, 0x0000ca, 
0x1000cb, 0x0400cc, 0x0100cd, 0x0040ce, 0x0010cf, 0x0004d0, 0x0001d1, 0x1000d3, 
0x0400d4, 0x0040d5, 0x0010d6, 0x0004d7, 0x1000d9, 0x0100da, 0x0010db, 0x0004dc, 
0x0400de, 0x0040df, 0x0004e0, 0x0400e2, 0x0010e3, 0x1001e4, 0x0040e6, 0x1004e7, 
0x0100e9, 0x1004ea, 0x0040ec, 0x0401ed, 0x0010ef, 0x0100f1, 0x1004f2, 0x0010f4, 
0x0040f6, 0x0101f7, 0x0404f9, 0x1004fb, 0x1010fd, 0x0000ff, 0x0000ff, 0x0000ff
};



static const unsigned int g_ar0330_gamma_045_220_table[] = 
{
0x000000, 0x000000, 0x000000, 0x000000, 0x040400, 0x100402, 0x101004, 0x001006, 
0x004008, 0x01000a, 0x01010b, 0x04040d, 0x10040f, 0x001011, 0x004013, 0x010015, 
0x040116, 0x040418, 0x10101a, 0x00401c, 0x01001e, 0x01011f, 0x040421, 0x101023, 
0x104425, 0x045128, 0x14512d, 0x055433, 0x155539, 0x155141, 0x155548, 0x155551, 
0x155559, 0x155561, 0x155569, 0x155570, 0x145577, 0x11157d, 0x044483, 0x041186, 
0x004089, 0x01018a, 0x01018c, 0x01018e, 0x040490, 0x100492, 0x001094, 0x004096, 
0x040197, 0x101099, 0x00409b, 0x04019c, 0x00109e, 0x0400a0, 0x0010a1, 0x0400a3, 
0x0010a4, 0x0401a5, 0x0040a7, 0x1004a8, 0x0100aa, 0x0010ab, 0x1001ac, 0x0100ae, 
0x0040af, 0x0004b0, 0x1000b2, 0x0100b3, 0x0040b4, 0x0004b5, 0x0001b6, 0x1000b8, 
0x0400b9, 0x0100ba, 0x0040bb, 0x0010bc, 0x0004bd, 0x0001be, 0x1000c0, 0x0400c1, 
0x0400c2, 0x0100c3, 0x0040c4, 0x0010c5, 0x0010c6, 0x0004c7, 0x0001c8, 0x0000ca, 
0x1000cb, 0x0400cc, 0x0100cd, 0x0040ce, 0x0010cf, 0x0004d0, 0x0001d1, 0x1000d3, 
0x0400d4, 0x0040d5, 0x0010d6, 0x0004d7, 0x1000d9, 0x0100da, 0x0010db, 0x0004dc, 
0x0400de, 0x0040df, 0x0004e0, 0x0400e2, 0x0010e3, 0x1001e4, 0x0040e6, 0x1004e7, 
0x0100e9, 0x1004ea, 0x0040ec, 0x0010ed, 0x0400ef, 0x0010f0, 0x1001f1, 0x0100f3, 
0x0010f4, 0x1001f5, 0x0100f7, 0x0010f8, 0x1001f9, 0x0100fb, 0x0004fc, 0x0100fe
};


static const unsigned int g_ar0330_gamma_045_20_150_table[] = 
{
0x000000, 0x010100, 0x144403, 0x115107, 0x15150d, 0x115514, 0x15551b, 0x151523, 
0x05452a, 0x044530, 0x044435, 0x111138, 0x04443c, 0x111040, 0x044443, 0x011146, 
0x11044a, 0x10444d, 0x044150, 0x041153, 0x041156, 0x04105a, 0x04115c, 0x04415f, 
0x104162, 0x010465, 0x041068, 0x10416a, 0x01046d, 0x101070, 0x010472, 0x104075, 
0x040477, 0x010179, 0x10407c, 0x04107e, 0x040480, 0x010182, 0x010184, 0x010186, 
0x004089, 0x01018a, 0x01018c, 0x01018e, 0x040490, 0x100492, 0x001094, 0x004096, 
0x040197, 0x101099, 0x00409b, 0x04019c, 0x00109e, 0x0400a0, 0x0010a1, 0x0400a3, 
0x0010a4, 0x0401a5, 0x0040a7, 0x1004a8, 0x0100aa, 0x0010ab, 0x1001ac, 0x0100ae, 
0x0040af, 0x0004b0, 0x1000b2, 0x0100b3, 0x0040b4, 0x0004b5, 0x0001b6, 0x1000b8, 
0x0400b9, 0x0100ba, 0x0040bb, 0x0400bc, 0x0000bd, 0x0000be, 0x0004be, 0x0040bf, 
0x0400c0, 0x0000c1, 0x0001c1, 0x0010c2, 0x0100c3, 0x1000c4, 0x0000c5, 0x0001c5, 
0x0010c6, 0x0040c7, 0x0400c8, 0x1000c9, 0x0000ca, 0x0000cb, 0x0001cb, 0x0001cc, 
0x0004cd, 0x0004ce, 0x0004cf, 0x0004d0, 0x0001d1, 0x0001d2, 0x1000d4, 0x0400d5, 
0x0100d6, 0x0010d7, 0x0004d8, 0x0400da, 0x0040db, 0x0004dc, 0x0400de, 0x0010df, 
0x0400e1, 0x0010e2, 0x0100e4, 0x1004e5, 0x0010e7, 0x0100e9, 0x0101ea, 0x0404ec, 
0x0404ee, 0x0404f0, 0x0404f2, 0x0404f4, 0x0104f6, 0x0101f8, 0x1040fb, 0x0404fd
};


static const unsigned int g_ar0330_gamma_045_20_210_table[] = 
{
0x000000, 0x010100, 0x144403, 0x115107, 0x15150d, 0x115514, 0x15551b, 0x151523, 
0x05452a, 0x044530, 0x044435, 0x111138, 0x04443c, 0x111040, 0x044443, 0x011146, 
0x11044a, 0x10444d, 0x044150, 0x041153, 0x041156, 0x04105a, 0x04115c, 0x04415f, 
0x104162, 0x010465, 0x041068, 0x10416a, 0x01046d, 0x101070, 0x010472, 0x104075, 
0x040477, 0x010179, 0x10407c, 0x04107e, 0x040480, 0x010182, 0x010184, 0x010186, 
0x004089, 0x01018a, 0x01018c, 0x01018e, 0x040490, 0x100492, 0x001094, 0x004096, 
0x040197, 0x101099, 0x00409b, 0x04019c, 0x00109e, 0x0400a0, 0x0010a1, 0x0400a3, 
0x0010a4, 0x0401a5, 0x0040a7, 0x1004a8, 0x0100aa, 0x0010ab, 0x1001ac, 0x0100ae, 
0x0040af, 0x0004b0, 0x1000b2, 0x0100b3, 0x0040b4, 0x0004b5, 0x0001b6, 0x1000b8, 
0x0400b9, 0x0100ba, 0x0040bb, 0x0010bc, 0x0004bd, 0x0001be, 0x1000c0, 0x0400c1, 
0x0400c2, 0x0100c3, 0x0040c4, 0x0010c5, 0x0010c6, 0x0004c7, 0x0001c8, 0x0000ca, 
0x1000cb, 0x0400cc, 0x0100cd, 0x0040ce, 0x0010cf, 0x0004d0, 0x0001d1, 0x1000d3, 
0x0400d4, 0x0040d5, 0x0010d6, 0x0004d7, 0x1000d9, 0x0100da, 0x0010db, 0x0004dc, 
0x0400de, 0x0040df, 0x0040e0, 0x0040e1, 0x0010e2, 0x0004e3, 0x0001e4, 0x0400e6, 
0x0100e7, 0x0010e8, 0x1001e9, 0x0100eb, 0x0010ec, 0x0400ee, 0x0040ef, 0x0401f0, 
0x0040f2, 0x0401f3, 0x0010f5, 0x0100f7, 0x0404f8, 0x0010fa, 0x0040fc, 0x0101fd
};



	
static const unsigned int g_ar0330_gamma_045_20_90_table[] = 
{
0x000000, 0x010100, 0x144403, 0x115107, 0x15150d, 0x115514, 0x15551b, 0x151523, 
0x05452a, 0x044530, 0x044435, 0x111138, 0x04443c, 0x111040, 0x044443, 0x011146, 
0x11044a, 0x10444d, 0x044150, 0x041153, 0x041156, 0x04105a, 0x04115c, 0x04415f, 
0x104162, 0x010465, 0x041068, 0x10416a, 0x01046d, 0x101070, 0x010472, 0x104075, 
0x040477, 0x010179, 0x10407c, 0x04107e, 0x040480, 0x010182, 0x010184, 0x010186, 
0x004089, 0x01018a, 0x01018c, 0x01018e, 0x040490, 0x004092, 0x000493, 0x000194, 
0x100096, 0x040097, 0x040098, 0x010099, 0x01009a, 0x01009b, 0x01009c, 0x04009d, 
0x04009e, 0x10009f, 0x1000a0, 0x0000a1, 0x0000a2, 0x0004a2, 0x0010a3, 0x0040a4, 
0x0400a5, 0x1000a6, 0x0000a7, 0x0001a7, 0x0010a8, 0x0100a9, 0x1000aa, 0x0000ab, 
0x0001ab, 0x0010ac, 0x0040ad, 0x0400ae, 0x0000af, 0x0000b0, 0x0001b0, 0x0010b1, 
0x0040b2, 0x0100b3, 0x0400b4, 0x1000b5, 0x0000b6, 0x0000b7, 0x0000b8, 0x0001b8, 
0x0001b9, 0x0001ba, 0x0001bb, 0x0000bd, 0x1000be, 0x0400bf, 0x0100c0, 0x0040c1, 
0x0010c2, 0x0001c3, 0x0400c5, 0x0040c6, 0x0004c7, 0x0400c9, 0x0040ca, 0x1001cb, 
0x0040cd, 0x0401ce, 0x0010d0, 0x0100d2, 0x1004d3, 0x0040d5, 0x0100d7, 0x0401d8, 
0x0404da, 0x0404dc, 0x1004de, 0x0404e0, 0x0404e2, 0x0404e4, 0x0101e6, 0x1040e9, 
0x0410eb, 0x0104ed, 0x1040f0, 0x0104f2, 0x1010f5, 0x0104f7, 0x0110fa, 0x0410fd
};


static const short g_ar0330_color_matrix4gamma045_20_210[9] = 
{
	(short) ((1.42018114698052970000 *64) + 0.5),     
	(short) ((-0.32074144171390329000*64) + 0.5),    
	(short) ((-0.09943970526662629400*64) + 0.5),    
	(short) ((-0.35250924020193392000*64) + 0.5),   
	(short) ((1.36067901444311870000 *64) + 0.5),    
	(short) ((-0.00816977424118477470*64) + 0.5),    
	(short) ((0.01667441856474540000 *64) + 0.5),    
	(short) ((-0.72159042306956311000*64) + 0.5),    
	(short) ((1.70491600450481770000 *64) + 0.5)    
};


static const short g_ar0330_color_matrix4gamma045_20_150[9] = 
{
	(short) ((1.45788125182001040000 *64) + 0.5),     
	(short) ((-0.33752467431626482000*64) + 0.5),    
	(short) ((-0.12035657750374544000*64) + 0.5),    
	(short) ((-0.37430481059148807000*64) + 0.5),   
	(short) ((1.39632021726176700000 *64) + 0.5),    
	(short) ((-0.02201540667027894800*64) + 0.5),    
	(short) ((0.00991181684542128890 *64) + 0.5),    
	(short) ((-0.72514723483855037000*64) + 0.5),    
	(short) ((1.71523541799312910000 *64) + 0.5)    
};



static const short g_ar0330_color_matrix4gamma045_20_90[9] = 
{
	(short) ((1.60146307102767580000*64) + 0.5),     
	(short) ((-0.5007079535694563000*64) + 0.5),    
	(short) ((-0.1007551174582194400*64) + 0.5),    
	(short) ((-0.4185560830904911900*64) + 0.5),   
	(short) ((1.49818064340681940000*64) + 0.5),    
	(short) ((-0.0796245603163281830*64) + 0.5),    
	(short) ((-0.0540887150804420170*64) + 0.5),    
	(short) ((-0.7348310079148492300*64) + 0.5),    
	(short) ((1.78891972299529130000*64) + 0.5)    
};

static const short g_ar0330_color_matrix4gamma045_20_90_special_B[9] = 
{
	(short) ((1.60146307102767580000*64) + 0.5),     
	(short) ((-0.5007079535694563000*64) + 0.5),    
	(short) ((-0.1007551174582194400*64) + 0.5),    
	(short) ((-0.4185560830904911900*64) + 0.5),   
	(short) ((1.49818064340681940000*64) + 0.5),    
	(short) ((-0.0796245603163281830*64) + 0.5),    
	(short) ((0.00964252667160129910 *64) + 0.5),
	(short) ((-0.7108056366196609000 *64) + 0.5),
	(short) ((1.70116310994805950000 *64) + 0.5)
};



static const short g_ar0330_color_matrix4gamma045_220[9] = 
{
	(short) ((1.0299383355342417000*64) + 0.5),     
	(short) ((-0.078524229797331882*64) + 0.5),    
	(short) ((0.0485858942630900680*64) + 0.5),    
	(short) ((-0.029117739227541756*64) + 0.5),   
	(short) ((0.8413536443567160000*64) + 0.5),    
	(short) ((0.1877640948708258500*64) + 0.5),    
	(short) ((0.1058602652031736000*64) + 0.5),    
	(short) ((-0.261129109281162340*64) + 0.5),    
	(short) ((1.1552688440779888000*64) + 0.5)    
};





static const short g_ar0330_color_matrix4gamma045[9] = 
{	
	(short) ((1.41584287504700510000 *64) + 0.5),
	(short) ((-0.3243545598584618400 *64) + 0.5),
	(short) ((-0.0914883151885433760 *64) + 0.5),
	(short) ((-0.3569149216976537100 *64) + 0.5),
	(short) ((1.37507786348114620000 *64) + 0.5),
	(short) ((-0.0181629417834924570 *64) + 0.5),
	(short) ((0.00964252667160129910 *64) + 0.5),
	(short) ((-0.7108056366196609000 *64) + 0.5),
	(short) ((1.70116310994805950000 *64) + 0.5)
};


static const short g_ar0330_color_matrix4gamma045_test1[9] = 
{	
	(short) ((1.41584287504700510000 *64) + 0.5),
	(short) ((-0.3243545598584618400 *64) + 0.5),
	(short) ((-0.0914883151885433760 *64) + 0.5),
	(short) ((-0.3569149216976537100 *64) + 0.5),
	(short) ((1.37507786348114620000 *64) + 0.5),
	(short) ((-0.0181629417834924570 *64) + 0.5),
	(short) ((0.00964252667160129910 *64) + 0.5),
	(short) ((-0.7108056366196609000 *64) + 0.5),
	(short) ((1.70116310994805950000 *64) + 0.5)
};


static const short g_ar0330_color_matrix4gamma_test4[9] = 
{	
	(short) ((1.42160445984815140000*64) + 0.5),
	(short) ((-0.3168409018578162200*64) + 0.5),
	(short) ((-0.1047635579903352100*64) + 0.5),
	(short) ((-0.3486722983102284500*64) + 0.5),
	(short) ((1.35324091320775940000*64) + 0.5),
	(short) ((-0.0045686148975309397*64) + 0.5),
	(short) ((0.02026084059785759500*64) + 0.5),
	(short) ((-0.7273689679201436100*64) + 0.5),
	(short) ((1.70710812732228610000*64) + 0.5)
};



static const unsigned int g_ar0330_gamma_table_test3[] = 
{
0x000000, 0x151401, 0x255507, 0x156510, 0x05551a, 0x111121, 0x111125, 0x041129, 
0x04442d, 0x044431, 0x111035, 0x041138, 0x10443c, 0x01113f, 0x104443, 0x041146, 
0x01104a, 0x11044d, 0x104450, 0x044153, 0x044156, 0x044159, 0x10415c, 0x10415f, 
0x010462, 0x010465, 0x041068, 0x10416a, 0x04046d, 0x10416f, 0x010472, 0x104174, 
0x041077, 0x010479, 0x00407c, 0x10107e, 0x040480, 0x010482, 0x010184, 0x010186, 
0x010188, 0x01018a, 0x01018c, 0x04018e, 0x040490, 0x101092, 0x004094, 0x010096, 
0x040197, 0x001099, 0x01009b, 0x04049c, 0x00409e, 0x04019f, 0x0010a1, 0x0400a3, 
0x0010a4, 0x0401a5, 0x0040a7, 0x1004a8, 0x0100aa, 0x0010ab, 0x1001ac, 0x0400ae, 
0x0040af, 0x0004b0, 0x1000b2, 0x0100b3, 0x0040b4, 0x0004b5, 0x0001b6, 0x1000b8, 
0x0400b9, 0x0100ba, 0x0010bb, 0x0004bc, 0x0004bd, 0x0001be, 0x1000c0, 0x0400c1, 
0x0100c2, 0x0100c3, 0x0040c4, 0x0010c5, 0x0004c6, 0x0004c7, 0x0001c8, 0x1000ca, 
0x0400cb, 0x0400cc, 0x0100cd, 0x0040ce, 0x0010cf, 0x0004d0, 0x0001d1, 0x0400d3, 
0x0100d4, 0x0040d5, 0x0010d6, 0x0001d7, 0x0040d9, 0x0040da, 0x0040db, 0x0100dc, 
0x0100dd, 0x0400de, 0x1000df, 0x0000e0, 0x0000e1, 0x0001e1, 0x0001e2, 0x0004e3, 
0x0004e4, 0x0001e5, 0x0001e6, 0x0400e8, 0x0100e9, 0x0010ea, 0x0400ec, 0x0010ed, 
0x0100ef, 0x1004f0, 0x1010f2, 0x1010f4, 0x1010f6, 0x0404f8, 0x0101fa, 0x0410fd
};


static const short g_ar0330_color_matrix4gamma_test5[9] = 
{
	(short) ((1.6230693099803568000 *64) + 0.5),     
	(short) ((-0.473494002731239370 *64) + 0.5),    
	(short) ((-0.149575307249117520 *64) + 0.5),    
	(short) ((-0.439293733055551310 *64) + 0.5),   
	(short) ((1.5153491015684177000 *64) + 0.5),    
	(short) ((-0.076055368512866511 *64) + 0.5),    
	(short) ((-0.036362186685731143 *64) + 0.5),    
	(short) ((-0.797383457460516860 *64) + 0.5),    
	(short) ((1.8337456441462479000 *64) + 0.5)    
};


static const unsigned int g_ar0330_gamma_table_test5[] = 
{
0x1a6a00, 0x15650e, 0x114517, 0x04451c, 0x051121, 0x114426, 0x05112a, 0x04442f, 
0x111133, 0x111137, 0x11113b, 0x11113f, 0x111143, 0x111147, 0x01114b, 0x04444f, 
0x111053, 0x044156, 0x11105a, 0x04445d, 0x041160, 0x011064, 0x110467, 0x11046a, 
0x11046d, 0x110470, 0x010473, 0x041076, 0x041178, 0x10417b, 0x04107e, 0x104180, 
0x040483, 0x004185, 0x041088, 0x01048a, 0x10108d, 0x01048f, 0x004191, 0x101094, 
0x101096, 0x101098, 0x00109a, 0x00409c, 0x04019d, 0x00109f, 0x0100a1, 0x0004a2, 
0x0400a4, 0x0040a5, 0x0004a6, 0x0001a7, 0x1000a9, 0x1000aa, 0x1000ab, 0x1000ac, 
0x1000ad, 0x0000ae, 0x0000af, 0x0004af, 0x0010b0, 0x0100b1, 0x1000b2, 0x0000b3, 
0x0004b3, 0x0040b4, 0x0400b5, 0x0000b6, 0x0001b6, 0x0010b7, 0x0040b8, 0x0400b9, 
0x1000ba, 0x0000bb, 0x0000bc, 0x0000bd, 0x0000be, 0x1000bf, 0x0400c0, 0x0100c1, 
0x0100c2, 0x0100c3, 0x0040c4, 0x0010c5, 0x0004c6, 0x0004c7, 0x0001c8, 0x1000ca, 
0x0400cb, 0x0400cc, 0x0100cd, 0x0040ce, 0x0010cf, 0x0004d0, 0x0001d1, 0x0400d3, 
0x0100d4, 0x0040d5, 0x0010d6, 0x0001d7, 0x0040d9, 0x0040da, 0x0040db, 0x0100dc, 
0x0100dd, 0x0400de, 0x1000df, 0x0000e0, 0x0000e1, 0x0001e1, 0x0001e2, 0x0004e3, 
0x0004e4, 0x0001e5, 0x0001e6, 0x0400e8, 0x0100e9, 0x0010ea, 0x0400ec, 0x0010ed, 
0x0100ef, 0x1004f0, 0x1010f2, 0x1010f4, 0x1010f6, 0x0404f8, 0x0101fa, 0x0410fd
};


static const unsigned int g_ar0330_gamma_table_test6[] = 
{
0x154500, 0x151506, 0x14540d, 0x145413, 0x151518, 0x11451e, 0x145124, 0x114529, 
0x05142f, 0x045134, 0x045139, 0x04513e, 0x051143, 0x114448, 0x04514c, 0x114451, 
0x111155, 0x044559, 0x04445e, 0x044462, 0x104466, 0x111169, 0x04116d, 0x104471, 
0x041174, 0x110478, 0x10447b, 0x04417e, 0x044181, 0x044184, 0x104187, 0x01048a, 
0x04108d, 0x10418f, 0x010492, 0x104194, 0x041097, 0x010499, 0x00419b, 0x00409e, 
0x0040a0, 0x0040a2, 0x0040a4, 0x0101a5, 0x0404a7, 0x0010a9, 0x0100ab, 0x1004ac, 
0x0040ae, 0x1004af, 0x0100b1, 0x0010b2, 0x0001b3, 0x0400b5, 0x0100b6, 0x0040b7, 
0x0040b8, 0x0040b9, 0x0040ba, 0x0040bb, 0x0100bc, 0x0400bd, 0x0000be, 0x0000bf, 
0x0001bf, 0x0010c0, 0x0400c1, 0x0000c2, 0x0000c3, 0x0004c3, 0x0100c4, 0x1000c5, 
0x0000c6, 0x0000c7, 0x0004c7, 0x0010c8, 0x0040c9, 0x0040ca, 0x0040cb, 0x0040cc, 
0x0010cd, 0x0004ce, 0x0001cf, 0x0004d0, 0x0001d1, 0x0001d2, 0x0001d3, 0x0001d4, 
0x0001d5, 0x0001d6, 0x0100d8, 0x0400d9, 0x1000da, 0x0000db, 0x0000dc, 0x0001dc, 
0x0010dd, 0x0100de, 0x1000df, 0x0000e0, 0x0001e0, 0x0010e1, 0x0100e2, 0x1000e3, 
0x0000e4, 0x0001e4, 0x0010e5, 0x0100e6, 0x0400e7, 0x1000e8, 0x0000e9, 0x0000ea, 
0x0000eb, 0x0001eb, 0x0001ec, 0x0001ed, 0x1000ef, 0x0400f0, 0x0100f1, 0x0040f2, 
0x0004f3, 0x0400f5, 0x0040f6, 0x1004f7, 0x0040f9, 0x1004fa, 0x0040fc, 0x0100fe

};




static const short g_ar0330_color_matrix4gamma_test3[9] = 
{
	(short) ((1.41933986289301360000 *64) + 0.5),     
	(short) ((-0.3133260920768463600 *64) + 0.5),    
	(short) ((-0.1060137708161671500 *64) + 0.5),    
	(short) ((-0.3479042620193061300 *64) + 0.5),   
	(short) ((1.35118469936092200000 *64) + 0.5),    
	(short) ((-0.0032804373416159740 *64) + 0.5),    
	(short) ((0.02124860372559035300 *64) + 0.5),    
	(short) ((-0.7262259948929421500 *64) + 0.5),    
	(short) ((1.70497739116735180000 *64) + 0.5)    
};


static const unsigned int g_ar0330_lens_pw650_gamma_table_test[] = 
{
0x145113, 0x114518, 0x05141e, 0x051423, 0x111428, 0x11442d, 0x044531, 0x111136, 
0x04453a, 0x11143f, 0x111143, 0x051147, 0x04444c, 0x104450, 0x111153, 0x111157, 
0x04445b, 0x11045f, 0x041162, 0x110466, 0x044469, 0x04116c, 0x011070, 0x011073, 
0x010476, 0x010479, 0x04107c, 0x04107f, 0x104181, 0x010484, 0x041087, 0x104189, 
0x04108c, 0x00418e, 0x041091, 0x010493, 0x004195, 0x101098, 0x04049a, 0x01049c, 
0x01019e, 0x0101a0, 0x0041a2, 0x0040a5, 0x0040a7, 0x0101a8, 0x0101aa, 0x0101ac, 
0x0404ae, 0x1004b0, 0x1010b2, 0x0040b4, 0x0100b6, 0x0401b7, 0x1004b9, 0x0010bb, 
0x0040bd, 0x0401be, 0x1004c0, 0x0010c2, 0x0040c4, 0x0401c5, 0x1004c7, 0x0010c9, 
0x0040cb, 0x0101cc, 0x0404ce, 0x1010d0, 0x0010d2, 0x0040d4, 0x0100d6, 0x0101d7, 
0x0101d9, 0x0404db, 0x0404dd, 0x0404df, 0x0404e1, 0x0101e3, 0x0101e5, 0x0040e8, 
0x1010ea, 0x0410ec, 0x0104ee, 0x1041f0, 0x0410f3, 0x0101f5, 0x0410f8, 0x1041fa, 
0x0410fd, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 
0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 
0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 
0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 
0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff
};
static const short g_ar0330_lens_pw650_color_matrix4gamma045[9] = 
{	
	(short) ((1.40584642951002810000 *64) + 0.5),
	(short) ((-0.40715546056950969000 *64) + 0.5),
	(short) ((0.00130903105948164880 *64) + 0.5),
	(short) ((-0.19836218224150923000 *64) + 0.5),
	(short) ((1.11702307901174120000 *64) + 0.5),
	(short) ((0.08133910322976796400 *64) + 0.5),
	(short) ((0.08658153407942324700 *64) + 0.5),
	(short) ((-0.75555176603938878000 *64) + 0.5),
	(short) ((1.66897023195996550000 *64) + 0.5)
};

static const short g_ar0330_awb_thr[19] = 
{
	200, // awbwinthr
	
	0*64, // sindata
	1*64, // cosdata 
	
	 40, // Ythr0
	100, // Ythr1
	144,	// Ythr2 
	200, // Ythr3 
	
	-4, // UL1N1 
	 3, // UL1P1 
	-4, // VL1N1 
	 4, // VL1P1 
	
	 -7, //UL1N2
	  3, //UL1P2
	 -5, //VL1N2
	  5, // VL1P2
	
	 -8, // UL1N3
	  7,	 //UL1P3
	 -7, // VL1N3
	  2, //VL1P3
};


static const short g_ar0330_lens_pw650_awb_thr[19] = 
{
	200, // awbwinthr
	
	0*64, // sindata
	1*64, // cosdata 
	
	 30, // Ythr0
	90, // Ythr1
	144,	// Ythr2 
	200, // Ythr3 
	
	-3, // UL1N1 
	 4, // UL1P1 
	-4, // VL1N1 
	 4, // VL1P1 
	
	 -6, //UL1N2
	  5, //UL1P2
	 -4, //VL1N2
	  4, // VL1P2
	
	 -6, // UL1N3
	  7,	 //UL1P3
	 -5, // VL1N3
	  5, //VL1P3
};

static const short g_ar0330_ob_table[11] = 
{
	0, // obautoen
	0, // ob_type
	0, //obHOffset
	0, // obVOffset
	
	1, // obmanuen
	42, // maunob = 42

	1, // wboffseten
	0, // wbo_r
	0, // wbo_gr
	0, // wbo_gb
	0 // wbo_b
};

//wb r gain: 93, b gain: 100
sensor_calibration_t ar0330_cdsp_calibration = 
{
	.ob = g_ar0330_ob_table,
	.ob_size = sizeof(unsigned short)*11,
	.lenscmp = g_ar0330_lenscmp_table,
	.lenscmp_size =sizeof(unsigned short)*256 ,
	.wb_gain = g_ar0330_lens_pw650_r_b_gain,
	.wbgain_size = sizeof(unsigned short)*71*2,
	.gamma1 = g_ar0330_lens_pw650_gamma_table_test, //g_ar0330_color_matrix4gamma_test5
	.gamma1_size = sizeof(unsigned int)*128,
	.color_matrix1 = g_ar0330_lens_pw650_color_matrix4gamma045, //g_ar0330_color_matrix4gamma045
	.matrix1_size = sizeof(short)*9,
	.gamma2 = g_ar0330_lens_pw650_gamma_table_test, //g_ar0330_color_matrix4gamma_test5
	.gamma2_size = sizeof(unsigned int)*128,
	.color_matrix2 = g_ar0330_lens_pw650_color_matrix4gamma045, //g_ar0330_color_matrix4gamma045
	.matrix2_size = sizeof(short)*9,
	.awb_thr = g_ar0330_lens_pw650_awb_thr,
	.awb_size = sizeof(short)*19
};

#endif //endif _STREAM_H_
