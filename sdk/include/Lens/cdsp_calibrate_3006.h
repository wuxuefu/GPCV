/**************************************************************************
 *                                                                        *
 *         Copyright (c) 2010 by Generalplus Inc.                         *
 *                                                                        *
 *  This software is copyrighted by and is the property of Generalplus    *
 *  Inc. All rights are reserved by Generalplus Inc.                      *
 *  This software may only be used in accordance with the                 *
 *  corresponding license agreement. Any unauthorized use, duplication,   *
 *  distribution, or disclosure of this software is expressly forbidden.  *
 *                                                                        *
 *  This Copyright notice MUST not be removed or modified without prior   *
 *  written consent of Generalplus Technology Co., Ltd.                   *
 *                                                                        *
 *  Generalplus Inc. reserves the right to modify this software           *
 *  without notice.                                                       *
 *                                                                        *
 *  Generalplus Inc.                                                      *
 *  No.19, Industry E. Rd. IV, Hsinchu Science Park,                      *
 *  Hsinchu City 30078, Taiwan, R.O.C.                                    *
 *                                                                        *
 **************************************************************************/
/**
 * @file cdsp_calibrate.h
 * @brief cdsp_calibrate header file
 * @author 
 */

#ifndef _CDSP_CALIBRATE_3006_H_
#define _CDSP_CALIBRATE_3006_H_

#include "mach/sensor_mgr.h"

static const unsigned short g_ar0330_lenscmp_table[] = 
{
	0x100, 0x100, 0x101, 0x101, 0x101, 0x101, 0x102, 0x103, 
	0x103, 0x103, 0x104, 0x104, 0x104, 0x105, 0x105, 0x106, 
	0x106, 0x107, 0x106, 0x106, 0x107, 0x107, 0x108, 0x108, 
	0x109, 0x109, 0x10a, 0x10a, 0x10a, 0x10b, 0x10b, 0x10c, 
	0x10c, 0x10d, 0x10e, 0x10f, 0x110, 0x110, 0x110, 0x110, 
	0x111, 0x111, 0x112, 0x112, 0x113, 0x114, 0x114, 0x115, 
	0x115, 0x116, 0x116, 0x117, 0x118, 0x119, 0x11a, 0x11b, 
	0x11b, 0x11c, 0x11d, 0x11e, 0x11f, 0x121, 0x121, 0x122, 
	0x123, 0x124, 0x126, 0x127, 0x128, 0x129, 0x12a, 0x12c, 
	0x12d, 0x12e, 0x12f, 0x131, 0x132, 0x132, 0x134, 0x135, 
	0x137, 0x138, 0x139, 0x13b, 0x13c, 0x13d, 0x13f, 0x140, 
	0x141, 0x143, 0x144, 0x145, 0x147, 0x149, 0x149, 0x14b, 
	0x14d, 0x14d, 0x14f, 0x150, 0x152, 0x154, 0x155, 0x157, 
	0x157, 0x159, 0x15b, 0x15c, 0x15e, 0x15f, 0x161, 0x162, 
	0x163, 0x164, 0x166, 0x167, 0x168, 0x169, 0x16b, 0x16c, 
	0x16e, 0x16f, 0x171, 0x172, 0x173, 0x175, 0x175, 0x178, 
	0x179, 0x17a, 0x17c, 0x17d, 0x17f, 0x180, 0x182, 0x183, 
	0x185, 0x187, 0x188, 0x18a, 0x18d, 0x18e, 0x190, 0x192, 
	0x194, 0x197, 0x19a, 0x19e, 0x19f, 0x1a2, 0x1a1, 0x177, 
	0x151, 0x12e, 0x10e, 0x0f1, 0x0d7, 0x0bf, 0x0aa, 0x097, 
	0x085, 0x075, 0x067, 0x05a, 0x04f, 0x045, 0x03c, 0x034, 
	0x02d, 0x027, 0x021, 0x01c, 0x018, 0x014, 0x011, 0x00e, 
	0x00c, 0x00a, 0x008, 0x006, 0x005, 0x004, 0x003, 0x002, 
	0x001, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 

};


static const unsigned short g_ar0330_lens_3006_r_b_gain[71][2] = 
{ // { r gain, b gain }  
{18, 232},
{23, 226},
{28, 220},
{32, 215},
{37, 209},
{41, 204},
{44, 198},
{48, 193},
{52, 188},
{55, 183},
{58, 179},
{61, 174},
{64, 169},
{66, 165},
{69, 161},
{71, 157},
{73, 153},
{75, 149},
{77, 145},
{79, 141},
{80, 138},
{82, 135},
{83, 131},
{84, 128},
{86, 125},
{87, 122},
{88, 120},
{88, 117},
{89, 115},
{90, 112},
{90, 110},
{91, 108},
{91, 106},
{92, 104},
{92, 102},
{92, 101},
{93, 99},
{93, 98},
{93, 97},
{93, 96},
{93, 95},
{93, 94},
{93, 93},
{94, 93},
{94, 92},
{94, 92},
{94, 92},
{94, 92},
{94, 92},
{94, 92},
{94, 93},
{95, 93},
{95, 94},
{95, 94},
{95, 95},
{96, 96},
{96, 97},
{97, 99},
{97, 100},
{98, 101},
{99, 103},
{100, 105},
{101, 107},
{102, 109},
{103, 111},
{104, 113},
{105, 115},
{107, 118},
{109, 121},
{110, 123},
{112, 126}
};

#define GAMMA_N_0 0
#define GAMMA_N_1 1
#define GAMMA_N_2 2
#define GAMMA_N_3 3
#define GAMMA_N_3006 4
#define GAMMA_N_SVN 5
#define GAMMA_N_MY 6
#define GAMMA_N_MY2 7
#define GAMMA_N GAMMA_N_0

static const unsigned int g_ar0330_lens_3006_gamma_table_test[] = 
{
#if (GAMMA_N == GAMMA_N_3006) //3006
0x111414, 0x114419, 0x04511d, 0x111422, 0x051126, 0x04442b, 0x11112f, 0x111133, 
0x111137, 0x11113b, 0x11113f, 0x111143, 0x044447, 0x10444b, 0x01114e, 0x044452, 
0x011155, 0x104459, 0x04415c, 0x01115f, 0x011063, 0x110466, 0x110469, 0x01046c, 
0x01046f, 0x011072, 0x041075, 0x104177, 0x01047a, 0x04107d, 0x01017f, 0x041082, 
0x010184, 0x101087, 0x040489, 0x01018b, 0x00408e, 0x101090, 0x101092, 0x040494, 
0x040496, 0x040498, 0x04049a, 0x10049c, 0x10109e, 0x0040a0, 0x0100a2, 0x0401a3, 
0x1004a5, 0x0040a7, 0x0100a9, 0x1004aa, 0x0040ac, 0x0401ad, 0x0040af, 0x0401b0, 
0x0040b2, 0x0401b3, 0x0040b5, 0x1004b6, 0x0100b8, 0x0010b9, 0x1001ba, 0x0100bc, 
0x0010bd, 0x1001be, 0x0100c0, 0x0010c1, 0x0004c2, 0x0400c4, 0x0100c5, 0x0010c6, 
0x0001c7, 0x0400c9, 0x0100ca, 0x0010cb, 0x0004cc, 0x1000ce, 0x0100cf, 0x0040d0, 
0x0004d1, 0x1001d2, 0x0400d4, 0x0040d5, 0x0010d6, 0x1001d7, 0x0100d9, 0x0040da, 
0x0004db, 0x0400dd, 0x0040de, 0x0004df, 0x0400e1, 0x0010e2, 0x1001e3, 0x0040e5, 
0x1004e6, 0x0100e8, 0x0004e9, 0x0100eb, 0x1004ec, 0x0040ee, 0x0401ef, 0x0010f1, 
0x0100f3, 0x0401f4, 0x1004f6, 0x0040f8, 0x0040fa, 0x0101fb, 0x0101fd, 0x0000ff, 
0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff,
0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff
#elif (GAMMA_N == GAMMA_N_SVN) //comi
0x1a6a00, 0x15650e, 0x114517, 0x04451c, 0x051121, 0x114426, 0x05112a, 0x04442f, 
0x111133, 0x111137, 0x11113b, 0x11113f, 0x111143, 0x111147, 0x01114b, 0x04444f, 
0x111053, 0x044156, 0x11105a, 0x04445d, 0x041160, 0x011064, 0x110467, 0x11046a, 
0x11046d, 0x110470, 0x010473, 0x041076, 0x041178, 0x10417b, 0x04107e, 0x104180, 
0x040483, 0x004185, 0x041088, 0x01048a, 0x10108d, 0x01048f, 0x004191, 0x101094, 
0x101096, 0x101098, 0x00109a, 0x00409c, 0x04019d, 0x00109f, 0x0100a1, 0x0004a2, 
0x0400a4, 0x0040a5, 0x0004a6, 0x0001a7, 0x1000a9, 0x1000aa, 0x1000ab, 0x1000ac, 
0x1000ad, 0x0000ae, 0x0000af, 0x0004af, 0x0010b0, 0x0100b1, 0x1000b2, 0x0000b3, 
0x0004b3, 0x0040b4, 0x0400b5, 0x0000b6, 0x0001b6, 0x0010b7, 0x0040b8, 0x0400b9, 
0x1000ba, 0x0000bb, 0x0000bc, 0x0000bd, 0x0000be, 0x1000bf, 0x0400c0, 0x0100c1, 
0x0100c2, 0x0100c3, 0x0040c4, 0x0010c5, 0x0004c6, 0x0004c7, 0x0001c8, 0x1000ca, 
0x0400cb, 0x0400cc, 0x0100cd, 0x0040ce, 0x0010cf, 0x0004d0, 0x0001d1, 0x0400d3, 
0x0100d4, 0x0040d5, 0x0010d6, 0x0001d7, 0x0040d9, 0x0040da, 0x0040db, 0x0100dc, 
0x0100dd, 0x0400de, 0x1000df, 0x0000e0, 0x0000e1, 0x0001e1, 0x0001e2, 0x0004e3, 
0x0004e4, 0x0001e5, 0x0001e6, 0x0400e8, 0x0100e9, 0x0010ea, 0x0400ec, 0x0010ed,
0x0100ef, 0x1004f0, 0x1010f2, 0x1010f4, 0x1010f6, 0x0404f8, 0x0101fa, 0x0410fd
#elif (GAMMA_N == GAMMA_N_0) //0_standard
0x199900, 0x15960b, 0x155615, 0x15561e, 0x155526, 0x11542e, 0x114534, 0x04543a, 
0x04513f, 0x111144, 0x144449, 0x11114d, 0x144452, 0x051156, 0x05145b, 0x011160, 
0x044464, 0x104468, 0x01116b, 0x10446f, 0x041172, 0x110476, 0x104479, 0x04417c, 
0x04417f, 0x044182, 0x104185, 0x104188, 0x01048b, 0x04108e, 0x010490, 0x101093, 
0x010495, 0x004197, 0x00409a, 0x10109c, 0x00409e, 0x0040a0, 0x0101a1, 0x1004a3, 
0x0040a5, 0x1001a6, 0x0100a8, 0x0010a9, 0x1001aa, 0x0400ac, 0x0100ad, 0x0040ae, 
0x0010af, 0x0010b0, 0x0010b1, 0x0040b2, 0x0040b3, 0x0100b4, 0x0400b5, 0x1000b6, 
0x0000b7, 0x0000b8, 0x0001b8, 0x0004b9, 0x0010ba, 0x0040bb, 0x0040bc, 0x0040bd, 
0x0040be, 0x0040bf, 0x0010c0, 0x0004c1, 0x1001c2, 0x0100c4, 0x0040c5, 0x0040c6, 
0x0040c7, 0x0040c8, 0x0040c9, 0x0100ca, 0x0100cb, 0x0100cc, 0x0400cd, 0x0400ce, 
0x0400cf, 0x0000d0, 0x0000d1, 0x0001d1, 0x0004d2, 0x0010d3, 0x0010d4, 0x0010d5, 
0x0010d6, 0x0010d7, 0x0010d8, 0x0004d9, 0x0004da, 0x0001db, 0x1000dd, 0x0400de, 
0x0100df, 0x0040e0, 0x0010e1, 0x0001e2, 0x1000e4, 0x0100e5, 0x0040e6, 0x0010e7, 
0x0004e8, 0x1000ea, 0x0400eb, 0x0040ec, 0x0010ed, 0x0004ee, 0x1001ef, 0x0400f1, 
0x0100f2, 0x0100f3, 0x0040f4, 0x0010f5, 0x0004f6, 0x0004f7, 0x0001f8, 0x0001f9, 
0x0001fa, 0x0001fb, 0x0004fc, 0x0010fd, 0x0040fe, 0x0000ff, 0x0000ff, 0x0000ff
#elif (GAMMA_N == GAMMA_N_1) //1brighten darkregion
0x054519, 0x11451f, 0x045125, 0x04512a, 0x05112f, 0x144434, 0x111138, 0x04513c, 
0x044441, 0x044445, 0x144449, 0x11114d, 0x044551, 0x051156, 0x05145b, 0x011160, 
0x044464, 0x104468, 0x01116b, 0x10446f, 0x041172, 0x110476, 0x104479, 0x04417c, 
0x04417f, 0x044182, 0x104185, 0x104188, 0x01048b, 0x04108e, 0x010490, 0x101093, 
0x010495, 0x004197, 0x00409a, 0x10109c, 0x00409e, 0x0040a0, 0x0101a1, 0x1004a3, 
0x0040a5, 0x1001a6, 0x0100a8, 0x0010a9, 0x1001aa, 0x0400ac, 0x0100ad, 0x0040ae, 
0x0010af, 0x0010b0, 0x0010b1, 0x0040b2, 0x0040b3, 0x0100b4, 0x0400b5, 0x1000b6, 
0x0000b7, 0x0000b8, 0x0001b8, 0x0004b9, 0x0010ba, 0x0040bb, 0x0040bc, 0x0040bd, 
0x0040be, 0x0040bf, 0x0010c0, 0x0004c1, 0x1001c2, 0x0100c4, 0x0040c5, 0x0040c6, 
0x0040c7, 0x0040c8, 0x0040c9, 0x0100ca, 0x0100cb, 0x0100cc, 0x0400cd, 0x0400ce, 
0x0400cf, 0x0000d0, 0x0000d1, 0x0001d1, 0x0004d2, 0x0010d3, 0x0010d4, 0x0010d5, 
0x0010d6, 0x0010d7, 0x0010d8, 0x0004d9, 0x0004da, 0x0001db, 0x1000dd, 0x0400de, 
0x0100df, 0x0040e0, 0x0010e1, 0x0001e2, 0x1000e4, 0x0100e5, 0x0040e6, 0x0010e7, 
0x0004e8, 0x1000ea, 0x0400eb, 0x0040ec, 0x0010ed, 0x0004ee, 0x1001ef, 0x0400f1, 
0x0100f2, 0x0100f3, 0x0040f4, 0x0010f5, 0x0004f6, 0x0004f7, 0x0001f8, 0x0001f9, 
0x0001fa, 0x0001fb, 0x0004fc, 0x0010fd, 0x0040fe, 0x0000ff, 0x0000ff, 0x0000ff
#elif (GAMMA_N == GAMMA_N_2) //2 darken birghtregion
0x199900, 0x15960b, 0x155615, 0x15561e, 0x155526, 0x11542e, 0x114534, 0x04543a, 
0x04513f, 0x111144, 0x144449, 0x11114d, 0x144452, 0x051156, 0x05145b, 0x011160, 
0x044464, 0x104468, 0x01116b, 0x10446f, 0x041172, 0x110476, 0x104479, 0x04417c, 
0x04417f, 0x044182, 0x104185, 0x104188, 0x01048b, 0x04108e, 0x010490, 0x041093, 
0x010495, 0x104098, 0x04109a, 0x04049c, 0x01049e, 0x0101a0, 0x0404a2, 0x1004a4, 
0x0010a6, 0x0100a8, 0x1004a9, 0x0040ab, 0x1001ac, 0x0040ae, 0x0004af, 0x0400b1, 
0x0100b2, 0x0010b3, 0x0004b4, 0x0001b5, 0x0001b6, 0x0000b8, 0x0000b9, 0x0001b9, 
0x0001ba, 0x0004bb, 0x0010bc, 0x0040bd, 0x0400be, 0x0000bf, 0x0000c0, 0x0004c0, 
0x0040c1, 0x0400c2, 0x0000c3, 0x0000c4, 0x0010c4, 0x0100c5, 0x1000c6, 0x0000c7, 
0x0000c8, 0x0004c8, 0x0010c9, 0x0040ca, 0x0100cb, 0x0100cc, 0x0100cd, 0x0100ce, 
0x1000cf, 0x1000d0, 0x0000d1, 0x0000d2, 0x0000d3, 0x0100d4, 0x0400d5, 0x0000d6, 
0x0000d7, 0x0001d7, 0x0010d8, 0x0100d9, 0x1000da, 0x0000db, 0x0004db, 0x0040dc, 
0x0400dd, 0x0000de, 0x0000df, 0x0010df, 0x0100e0, 0x1000e1, 0x0000e2, 0x0000e3, 
0x0004e3, 0x0040e4, 0x0100e5, 0x0400e6, 0x1000e7, 0x1000e8, 0x1000e9, 0x1000ea, 
0x1000eb, 0x1000ec, 0x0400ed, 0x0100ee, 0x0040ef, 0x0010f0, 0x0004f1, 0x0400f3, 
0x0100f4, 0x0004f5, 0x0400f7, 0x0010f8, 0x0401f9, 0x0010fb, 0x0100fd, 0x0004fe
#elif (GAMMA_N == GAMMA_N_3)  //3 merge of 1 and 2
0x054519, 0x11451f, 0x045125, 0x04512a, 0x05112f, 0x144434, 0x111138, 0x04513c, 
0x044441, 0x044445, 0x144449, 0x11114d, 0x044551, 0x051156, 0x05145b, 0x011160, 
0x044464, 0x104468, 0x01116b, 0x10446f, 0x041172, 0x110476, 0x104479, 0x04417c, 
0x04417f, 0x044182, 0x104185, 0x104188, 0x01048b, 0x04108e, 0x010490, 0x041093, 
0x010495, 0x104098, 0x04109a, 0x04049c, 0x01049e, 0x0101a0, 0x0404a2, 0x1004a4, 
0x0010a6, 0x0100a8, 0x1004a9, 0x0040ab, 0x1001ac, 0x0040ae, 0x0004af, 0x0400b1, 
0x0100b2, 0x0010b3, 0x0004b4, 0x0001b5, 0x0001b6, 0x0000b8, 0x0000b9, 0x0001b9, 
0x0001ba, 0x0004bb, 0x0010bc, 0x0040bd, 0x0400be, 0x0000bf, 0x0000c0, 0x0004c0, 
0x0040c1, 0x0400c2, 0x0000c3, 0x0000c4, 0x0010c4, 0x0100c5, 0x1000c6, 0x0000c7, 
0x0000c8, 0x0004c8, 0x0010c9, 0x0040ca, 0x0100cb, 0x0100cc, 0x0100cd, 0x0100ce, 
0x1000cf, 0x1000d0, 0x0000d1, 0x0000d2, 0x0000d3, 0x0100d4, 0x0400d5, 0x0000d6, 
0x0000d7, 0x0001d7, 0x0010d8, 0x0100d9, 0x1000da, 0x0000db, 0x0004db, 0x0040dc, 
0x0400dd, 0x0000de, 0x0000df, 0x0010df, 0x0100e0, 0x1000e1, 0x0000e2, 0x0000e3, 
0x0004e3, 0x0040e4, 0x0100e5, 0x0400e6, 0x1000e7, 0x1000e8, 0x1000e9, 0x1000ea, 
0x1000eb, 0x1000ec, 0x0400ed, 0x0100ee, 0x0040ef, 0x0010f0, 0x0004f1, 0x0400f3,
0x0100f4, 0x0004f5, 0x0400f7, 0x0010f8, 0x0401f9, 0x0010fb, 0x0100fd, 0x0004fe
#elif (GAMMA_N == GAMMA_N_MY)  //3 merge of 1 and 2
0x044100, 0x110404, 0x011107, 0x04440b, 0x11110e, 0x011112, 0x044416, 0x111119, 
0x10441d, 0x044120, 0x011024, 0x110427, 0x01042a, 0x04102d, 0x00412f, 0x004032, 
0x010034, 0x100435, 0x010037, 0x001038, 0x000139, 0x00003b, 0x00003c, 0x00013c, 
0x00013d, 0x00013e, 0x100040, 0x010041, 0x001042, 0x040143, 0x004045, 0x040146, 
0x004048, 0x040149, 0x10104b, 0x01004d, 0x10044e, 0x004050, 0x040151, 0x001053, 
0x010055, 0x100456, 0x004058, 0x040159, 0x00105b, 0x01005d, 0x10045e, 0x001060, 
0x004062, 0x040163, 0x001065, 0x010067, 0x040468, 0x00106a, 0x00406c, 0x01016d, 
0x04046f, 0x041071, 0x040473, 0x040475, 0x010477, 0x010179, 0x00417b, 0x00407e, 
0x101080, 0x040482, 0x040484, 0x040486, 0x040488, 0x10048a, 0x00108c, 0x01008e, 
0x10048f, 0x010091, 0x100492, 0x010094, 0x000495, 0x010097, 0x001098, 0x000499, 
0x04009b, 0x00409c, 0x10049d, 0x01009f, 0x0010a0, 0x0001a1, 0x0100a3, 0x0010a4, 
0x0401a5, 0x0010a7, 0x0400a9, 0x0040aa, 0x0401ab, 0x0010ad, 0x0100af, 0x1004b0, 
0x0040b2, 0x0401b3, 0x0010b5, 0x0100b7, 0x0404b8, 0x0010ba, 0x0100bc, 0x1004bd, 
0x0040bf, 0x0401c0, 0x0010c2, 0x0400c4, 0x0010c5, 0x0401c6, 0x0010c8, 0x1001c9, 
0x0040cb, 0x1001cc, 0x0040ce, 0x0401cf, 0x1010d1, 0x0040d3, 0x0100d5, 0x0101d6, 
0x1040d9, 0x0404db, 0x1110de, 0x0511e1, 0x0511e6, 0x1545eb, 0x1555f1, 0x0455f9

#elif (GAMMA_N == GAMMA_N_MY2)  //stand
0x29b900, 0x1a9911, 0x19661d, 0x155528, 0x115130, 0x114536, 0x05143c, 0x145141, 
0x045146, 0x11144b, 0x11114f, 0x011153, 0x044457, 0x04115a, 0x10415d, 0x010460, 
0x004162, 0x101065, 0x001067, 0x004069, 0x04016a, 0x00106c, 0x04006e, 0x00406f, 
0x100470, 0x010072, 0x001073, 0x100174, 0x010076, 0x001077, 0x100178, 0x01007a, 
0x00107b, 0x00047c, 0x00017d, 0x10007f, 0x040080, 0x010081, 0x010082, 0x010083, 
0x010084, 0x010085, 0x010086, 0x010087, 0x040088, 0x040089, 0x10008a, 0x00008b, 
0x00008c, 0x00048c, 0x01008d, 0x00008e, 0x00008f, 0x00108f, 0x040090, 0x000091, 
0x000191, 0x010092, 0x000093, 0x000094, 0x004094, 0x040095, 0x000096, 0x000097, 
0x000197, 0x000498, 0x001099, 0x00109a, 0x00109b, 0x00109c, 0x00109d, 0x00109e, 
0x00049f, 0x0004a0, 0x0001a1, 0x1001a2, 0x0400a4, 0x0100a5, 0x0040a6, 0x0010a7, 
0x0004a8, 0x1000aa, 0x0100ab, 0x0010ac, 0x1001ad, 0x0100af, 0x0004b0, 0x0100b2, 
0x1004b3, 0x0040b5, 0x0101b6, 0x0404b8, 0x0010ba, 0x0100bc, 0x1001bd, 0x0040bf, 
0x0401c0, 0x0040c2, 0x1001c3, 0x0100c5, 0x0010c6, 0x0001c7, 0x1000c9, 0x0400ca, 
0x0100cb, 0x0100cc, 0x0100cd, 0x0100ce, 0x0040cf, 0x0040d0, 0x0040d1, 0x0010d2, 
0x0010d3, 0x0004d4, 0x0001d5, 0x0001d6, 0x0400d8, 0x0100d9, 0x0010da, 0x0401db, 
0x0010dd, 0x0100df, 0x0041e0, 0x0110e3, 0x0444e6, 0x1544ea, 0x1955ef, 0x0559f7, 

#endif
};
static const short g_ar0330_lens_3006_color_matrix4gamma045[9] = 
{	
	(short) ((1.41201774840148200000 *64) + 0.5),
	(short) ((-0.37650008976993549000 *64) + 0.5),
	(short) ((-0.03551765863154632300 *64) + 0.5),
	(short) ((-0.21717408906535002000 *64) + 0.5),
	(short) ((1.16473352372029180000 *64) + 0.5),
	(short) ((0.05244056534505821300 *64) + 0.5),
	(short) ((0.08960668130566316900 *64) + 0.5),
	(short) ((-0.73283253611320409000 *64) + 0.5),
	(short) ((1.64322585480754090000 *64) + 0.5)
};

static const short g_ar0330_lens_3006_awb_thr[19] = 
{
	200, // awbwinthr
	
	0*64, // sindata
	1*64, // cosdata 
	
	 30, // Ythr0
	90, // Ythr1
	144,	// Ythr2 
	200, // Ythr3 
	
	-4, // UL1N1 
	 4, // UL1P1 
	-3, // VL1N1 
	 4, // VL1P1 
	
	 -6, //UL1N2
	  5, //UL1P2
	 -4, //VL1N2
	  4, // VL1P2
	
	 -9, // UL1N3
	  5,	 //UL1P3
	 -6, // VL1N3
	  4, //VL1P3
};

static const short g_ar0330_ob_table[11] = 
{
	0, // obautoen
	0, // ob_type
	0, //obHOffset
	0, // obVOffset
	
	1, // obmanuen
	42, // maunob = 42

	1, // wboffseten
	0, // wbo_r
	0, // wbo_gr
	0, // wbo_gb
	0 // wbo_b
};

//awb r gain: 102, b gain: 96
sensor_calibration_t ar0330_cdsp_calibration = 
{
	.ob = g_ar0330_ob_table,
	.ob_size = sizeof(unsigned short)*11,
	.lenscmp = g_ar0330_lenscmp_table,
	.lenscmp_size =sizeof(unsigned short)*256 ,
	.wb_gain = g_ar0330_lens_3006_r_b_gain,
	.wbgain_size = sizeof(unsigned short)*71*2,
	.gamma1 = g_ar0330_lens_3006_gamma_table_test,
	.gamma1_size = sizeof(unsigned int)*128,
	.color_matrix1 = g_ar0330_lens_3006_color_matrix4gamma045,
	.matrix1_size = sizeof(short)*9,
	.gamma2 = g_ar0330_lens_3006_gamma_table_test,
	.gamma2_size = sizeof(unsigned int)*128,
	.color_matrix2 = g_ar0330_lens_3006_color_matrix4gamma045,
	.matrix2_size = sizeof(short)*9,
	.awb_thr = g_ar0330_lens_3006_awb_thr,
	.awb_size = sizeof(short)*19
};

#endif //endif _STREAM_H_
