require "common"
lfs = require "lfs"

function selectToNumber(list, select)
	if (select == nil) then
		return 0
	end

	for i = 1, #list do
		if list[i] == select then
			return i
		end
	end
	return 0
end


function selectList(title, list, valueList)
	local n = 0
	local valid = true
	valueList = valueList or list
	local nlist = {}

	for i = 1, #list do
		table.insert(nlist, i, tostring(i))
	end
	--printf("nlist = << %s >>\n", nlist)

	repeat
		valid = true
		printf("<< %s >>\n", title)
		for i = 1, #list do
			if #list >= 10 then
				printf("%2d. %s\n", i, list[i])
			else
				printf("%d. %s\n", i, list[i])
			end
		end
		printf("Select [1 .. %d] :", #list)

		local line = io.read("*line")
		--printf("line = << %s >>\n", line)
		n = selectToNumber(nlist, line)
		if (n == 0) then
			printf("\n");
			printf("Error : invalid value!\n\n");
			valid = false
		end
	until (valid == true)
	printf("\n")

	return valueList[n], n
end

function saveToFile(filename, str)
	local f = assert(io.open(filename, "wb"));
	f:write(str)
	f:close();
end

function GetArch(filename)
	local f = assert(io.open(filename, "r"));
	local all = f:read("*all")
	f:close();
	return  string.match( all, "SYSCONFIG_ARCH = (%w+)")
end

---------------------------------------------------------------------
-- Main
---------------------------------------------------------------------
function findProducts(path, arch)
	local list = {}
	for dname in lfs.dir(path) do
		if dname:sub(1,1) ~= "." then
			local dirname = path .. "/" .. dname
			local attr = lfs.attributes(dirname)
			if attr.mode == "directory" then
				local configFile = dirname .. "/" .. "config/sysconfig.mak"
				local attr = lfs.attributes(configFile)
				if attr and attr.mode == "file" then
					local sys_arch = GetArch(configFile)
					if sys_arch == arch then
						list[dname] = {
							name = dname,
						}
					end
				end
			end
		end
	end
	return list
end

function selectProducts(list, prompt)
	local prompts = {}
	local sortedList = {}
	for k, v in pairsBySortedKey(list) do
		prompts[#prompts + 1] = v.name
		sortedList[#sortedList + 1] = v
	end
	local object = selectList(prompt, prompts, sortedList)
	return object
end
	

function main()
	local products_32900 = findProducts("out","GPL32900")
	local products_32900B = findProducts("out","GPL32900B")
	
	if products_32900 == nil or products_32900B == nil then
		print("No GPL32900 or GPL32900B product folder \n")
		return
	end
	
	local product_32900 = selectProducts(products_32900, "Select GPL32900 Product:")
	local product_32900B = selectProducts(products_32900B, "Select GPL32900B Product:")
	--saveToFile("product_config.mak", string.format("PRODUCT ?= %s\n", product.name))
	print("Set GPL32900 product : " .. product_32900.name .. "\n")
	print("Set GPL32900B product : " .. product_32900B.name .. "\n")
	
	-------------------------------------
	-- Product
	-------------------------------------
	local product = {
		name = "multiplatform",
		--project = project,
		--platform = platform
	}
	product.path = "out/" .. product.name
	
	saveToFile("product_config.mak", string.format("PRODUCT ?= %s\n", product.name))

	lfs.mkdir("out")
	lfs.mkdir(product.path)
	lfs.mkdir(product.path .. "/config")
	
	saveToFile(product.path .. "/config/sysconfig.mak", string.format(
[[#=== Project Configuration ===

SYSCONFIG_GPL32900 = %s
SYSCONFIG_GPL32900B = %s
SYSCONFIG_HOST = linux-x86
SYSCONFIG_TARGET = linux-arm

]], product_32900.name, product_32900B.name ))
	
	saveToFile(product.path .. "/Makefile", string.format(
[[### DO NOT EDIT THIS FILE ###
TOPDIR := ../../
PRODUCT := %s
include $(TOPDIR)sdk/build/core/multi.mak
### DO NOT EDIT THIS FILE ###
]], product.name))
end


main()

